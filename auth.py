import bcrypt
from config import DB_CONFIG
import psycopg2

class Auth:
    def __init__(self):
        self.conn = None  # –Ø–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.init_db()    # –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            self.conn = psycopg2.connect(**DB_CONFIG, client_encoding='utf-8')
            with self.conn.cursor() as cur:
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                cur.execute("""
                    CREATE TABLE IF NOT EXISTS users (
                        id SERIAL PRIMARY KEY,
                        username VARCHAR(50) UNIQUE NOT NULL,
                        password VARCHAR(100) NOT NULL,
                        is_admin BOOLEAN DEFAULT FALSE
                    )
                """)
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                cur.execute("SELECT * FROM users WHERE username = 'admin'")
                if not cur.fetchone():
                    hashed_pw = bcrypt.hashpw(b'admin123', bcrypt.gensalt()).decode('utf-8')
                    cur.execute("""
                        INSERT INTO users (username, password, is_admin)
                        VALUES (%s, %s, TRUE)
                    """, ('admin', hashed_pw))
                
                self.conn.commit()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            if self.conn:
                self.conn.rollback()

    def authenticate(self, username, password):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.conn:
            print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            return None

        try:
            with self.conn.cursor() as cursor:
                cursor.execute(
                    "SELECT password, is_admin FROM users WHERE username = %s",
                    (username,)
                )
                result = cursor.fetchone()

                if result and bcrypt.checkpw(password.encode("utf-8"), result[0].encode("utf-8")):
                    return {"is_admin": result[1]}
                return None
        except psycopg2.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

    def create_user(self, username, password, is_admin=False):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.conn:
            print("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            return False

        hashed_password = bcrypt.hashpw(password.encode("utf-8"), bcrypt.gensalt()).decode("utf-8")
        try:
            with self.conn.cursor() as cur:
                cur.execute(
                    "INSERT INTO users (username, password, is_admin) VALUES (%s, %s, %s)",
                    (username, hashed_password, is_admin)
                )
                self.conn.commit()
                return True
        except psycopg2.Error as e:
            print(f"–û—à–∏–±–∫–∞ SQL: {e}")
            self.conn.rollback()
            return False

    def create_admin(self, current_user_id, new_username, new_password):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if not self.conn:
            print("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            return False

        try:
            with self.conn.cursor() as cur:
                cur.execute("SELECT is_admin FROM users WHERE id = %s", (current_user_id,))
                result = cur.fetchone()
                
                if not result or not result[0]:
                    raise PermissionError("–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

                hashed_pw = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
                cur.execute(
                    "INSERT INTO users (username, password, is_admin) VALUES (%s, %s, TRUE)",
                    (new_username, hashed_pw)
                )
                self.conn.commit()
                return True
        except PermissionError as e:
            print(e)
            return False
        except psycopg2.Error as e:
            print(f"–û—à–∏–±–∫–∞ SQL: {e}")
            self.conn.rollback()
            return False

    def close_connection(self):
            """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
            if self.conn:
                self.conn.close()
                print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")
    def create_user(self, username, password, is_admin=False):
        if not self.conn:
            print("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            return False

        hashed_password = bcrypt.hashpw(password.encode("utf-8"), bcrypt.gensalt()).decode("utf-8")
        try:
            with self.conn.cursor() as cur:
                cur.execute(
                    "INSERT INTO users (username, password, is_admin) VALUES (%s, %s, %s)",
                    (username, hashed_password, is_admin)
                )
                self.conn.commit()
                return True
        except psycopg2.Error as e:
            print(f"–û—à–∏–±–∫–∞ SQL: {e}")
            self.conn.rollback()
            return False